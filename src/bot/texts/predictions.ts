import { DBLastResults, DBPredictionPoints, DBPredictionResult, DBPreictionsStats, DBRating } from "../../types";

type PredictionsTextData = {
  userRating: DBRating;
  userStats: DBPreictionsStats[];
  lastUserResults: DBLastResults;
  userPredictions: DBPredictionResult[];
};

export class PredictionsText {
  private userRating: DBRating;
  private userStats: DBPreictionsStats[];
  private lastUserResults: DBLastResults;
  private userPredictions: DBPredictionResult[];

  constructor(data: PredictionsTextData) {
    this.userRating = data.userRating;
    this.userStats = data.userStats;
    this.lastUserResults = data.lastUserResults;
    this.userPredictions = data.userPredictions;
  }

  private signs = {
    [''+null]: '‚ö™',
    [''+DBPredictionPoints.NOTHING]: 'üî¥',
    [''+DBPredictionPoints.ONLY_RESULT]: 'üü†',
    [''+DBPredictionPoints.RESULT_AND_DIFF]: 'üü°',
    [''+DBPredictionPoints.EXACTLY_SCORE]: 'üü¢',
    [''+DBPredictionPoints.TECHNICAL_RESULT]: '‚ö™',
  };

  private getUserRating(): string {
    return this.userRating
      ? [
        `–í—ã –Ω–∞ ${this.userRating.position} –º–µ—Å—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç–æ–≤.`,
        `–£ –≤–∞—Å ${this.userRating.points}–æ—á.`,
      ].join(' ')
      : '–í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.';
  }

  private getUserStats(): string {
    const entries = this.userStats.map(s => ([''+s.value, +s.count]));
    const map = Object.fromEntries(entries);

    const texts = {
      [''+null]: '–ë–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
      [''+DBPredictionPoints.NOTHING]: '–ù–∏—á–µ–≥–æ –Ω–µ —É–≥–∞–¥–∞–Ω–æ(0–æ—á.)',
      [''+DBPredictionPoints.ONLY_RESULT]: '–£–≥–∞–¥–∞–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç(2–æ—á.)',
      [''+DBPredictionPoints.RESULT_AND_DIFF]: '–£–≥–∞–¥–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–∞–∑–Ω–∏—Ü–∞(3–æ—á.)',
      [''+DBPredictionPoints.EXACTLY_SCORE]: '–£–≥–∞–¥–∞–Ω —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç(5–æ—á.)',
    };
    const statsRows = Object.entries(this.signs)
      .filter(([key]) => key !== ''+DBPredictionPoints.TECHNICAL_RESULT)
      .map(([key, sign]) => {
        const count = map[key] || 0;
        return `${sign} ${texts[key]}: ${count}`;
      });

    const text = [
      '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:',
      statsRows.join('\n'),
    ].join('\n\n');
    return text;
  }

  private getLastUserResults(): string {
    const lastResultsText = this.lastUserResults
      .map(r => this.signs[''+r.points])
      .join('');
    return this.lastUserResults.length === 0
      ? ''
      : [
          '–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:',
          lastResultsText,
        ].join('\n');
  }

  private getLastUserPredictions(): string {
    const lastPredictionsText = this.userPredictions.length === 0
      ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.'
      : this.userPredictions.map(p => {
        const teamsText = p.teams[0].join('-');
        const scoreText = p.result ? p.result.join(':') : '?:?';
        return [
          teamsText + ' ' + scoreText,
          `–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑:  ${p.prediction.join(':')}`,
          `–û—á–∫–∏: ${p.points !== null ? p.points : '?'} ${this.signs[''+p.points]}`
        ].join('\n');
      }).join('\n\n');
    return [
      '–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:',
      lastPredictionsText,
    ].join('\n\n');
  }

  value() {
    const text = [
      this.getUserRating(),
      this.getUserStats(),
      this.getLastUserResults(),
      this.getLastUserPredictions(),
      '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.'
    ].join('\n\n\n');
    return text;
  }
}
